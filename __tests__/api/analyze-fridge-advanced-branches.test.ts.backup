/**
 * Advanced Branch Coverage Tests for /api/analyze-fridge
 * Target: Push branch coverage from 86.17% to 95%+
 * Focus: Lines 85-94, 111 (personalApiKey branches in error handling)
 */

import {
  createMockRequestWithFormData,
  AnthropicMockManager,
  NextResponseMockManager,
} from '../helpers/api-test-utils';

// Import the mock creator function directly from the mock file
import { mockMessagesCreate } from '../__mocks__/@anthropic-ai/sdk';

// Tell Jest to use the mock implementation
jest.mock('@anthropic-ai/sdk');

// Mock NextResponse
const mockNextResponseJson = jest.fn();
jest.mock('next/server', () => ({
  NextResponse: {
    json: mockNextResponseJson,
  },
  NextRequest: jest.fn(),
}));

describe('/api/analyze-fridge - Advanced Branch Coverage', () => {
  let anthropicManager: AnthropicMockManager;
  let responseManager: NextResponseMockManager;

  beforeEach(() => {
    jest.clearAllMocks();

    // Use the imported mock creator
    anthropicManager = new AnthropicMockManager(mockMessagesCreate);
    responseManager = new NextResponseMockManager(mockNextResponseJson);

    // Setup standard response behavior
    responseManager.setupStandardBehavior();
  });

  describe('Authentication Error Branches - Personal API Key Scenarios', () => {
    test('covers personalApiKey true branch with auth error (lines 89-91)', async () => {
      // Mock an authentication error from Anthropic
      anthropicManager.mockAuthError();

      // Create request with personal API key
      const mockFile = new File(['test content'], 'fridge.jpg', {
        type: 'image/jpeg',
      });
      const formData = new FormData();
      formData.append('image', mockFile);
      formData.append('apiKey', 'sk-ant-api-user-personal-key'); // Personal API key
      formData.append('locale', 'en');

      const request = createMockRequestWithFormData(formData);

      const { POST } = await import('@/app/api/analyze-fridge/route');
      await POST(request);

      // Verify the personalApiKey true branch was taken (line 89-91)
      expect(mockNextResponseJson).toHaveBeenCalledWith(
        {
          success: false,
          error:
            'Invalid personal API key. Please check your Anthropic API key in settings.',
          processingTime: expect.any(Number),
        },
        { status: 401 }
      );
    });

    test('covers personalApiKey false branch with auth error (lines 92-94)', async () => {
      // Mock an authentication error from Anthropic
      anthropicManager.mockAuthError();

      // Create request WITHOUT personal API key (using environment key)
      const mockFile = new File(['test content'], 'fridge.jpg', {
        type: 'image/jpeg',
      });
      const formData = new FormData();
      formData.append('image', mockFile);
      formData.append('locale', 'en');
      // No apiKey field = personalApiKey will be null/undefined

      const request = createMockRequestWithFormData(formData);

      const { POST } = await import('@/app/api/analyze-fridge/route');
      await POST(request);

      // Verify the personalApiKey false branch was taken (line 92-94)
      expect(mockNextResponseJson).toHaveBeenCalledWith(
        {
          success: false,
          error: 'Authentication failed. Please configure a valid API key.',
          processingTime: expect.any(Number),
        },
        { status: 401 }
      );
    });

    test('covers generic error response branch (line 111)', async () => {
      // Mock a non-authentication error (network error, etc.)
      anthropicManager.mockAPIError('Network connection failed');

      const mockFile = new File(['test content'], 'fridge.jpg', {
        type: 'image/jpeg',
      });
      const formData = new FormData();
      formData.append('image', mockFile);
      formData.append('apiKey', 'sk-ant-api-valid-key');
      formData.append('locale', 'en');

      const request = createMockRequestWithFormData(formData);

      const { POST } = await import('@/app/api/analyze-fridge/route');
      await POST(request);

      // Verify generic error response (line 111+)
      expect(mockNextResponseJson).toHaveBeenCalledWith(
        {
          success: false,
          error: expect.stringContaining('analysis'),
          processingTime: expect.any(Number),
        },
        { status: 500 }
      );
    });

    test('covers rate limit error with personalApiKey (lines 89-91)', async () => {
      // Mock a rate limiting error
      anthropicManager.mockRateLimitError();

      const mockFile = new File(['test content'], 'fridge.jpg', {
        type: 'image/jpeg',
      });
      const formData = new FormData();
      formData.append('image', mockFile);
      formData.append('apiKey', 'sk-ant-api-personal-key');
      formData.append('locale', 'en');

      const request = createMockRequestWithFormData(formData);

      const { POST } = await import('@/app/api/analyze-fridge/route');
      await POST(request);

      // A rate limit error with a personal key should give a specific message
      expect(mockNextResponseJson).toHaveBeenCalledWith(
        {
          success: false,
          error:
            'You have exceeded your personal API key rate limit. Please check your plan and billing details.',
          processingTime: expect.any(Number),
        },
        { status: 429 }
      );
    });

    test('covers validation error without personalApiKey (lines 92-94)', async () => {
      // Mock validation error by using invalid form data
      const mockFile = new File(['test content'], 'fridge.jpg', {
        type: 'image/jpeg',
      });
      const formData = new FormData();
      formData.append('image', mockFile);
      formData.append('locale', 'en');
      // No personal API key, will use environment

      // Create API error for validation failure
      anthropicManager.mockAPIError('Invalid request format');

      const request = createMockRequestWithFormData(formData);

      const { POST } = await import('@/app/api/analyze-fridge/route');
      await POST(request);

      // Should hit generic error path since it's not auth error
      expect(mockNextResponseJson).toHaveBeenCalledWith(
        {
          success: false,
          error: expect.stringContaining('analysis'),
          processingTime: expect.any(Number),
        },
        { status: 500 }
      );
    });
  });

  describe('Error Classification Branch Coverage', () => {
    test('covers non-auth error path with detailed error message', async () => {
      // Mock a specific API error that is not authentication-related
      anthropicManager.mockAPIError(
        'Image processing failed: Invalid file format'
      );

      const mockFile = new File(['invalid content'], 'test.txt', {
        type: 'text/plain',
      });
      const formData = new FormData();
      formData.append('image', mockFile);
      formData.append('locale', 'en');

      const request = createMockRequestWithFormData(formData);

      const { POST } = await import('@/app/api/analyze-fridge/route');
      await POST(request);

      // Should hit the generic error branch (line 111)
      expect(mockNextResponseJson).toHaveBeenCalledWith(
        {
          success: false,
          error: expect.stringContaining('analysis'),
          processingTime: expect.any(Number),
        },
        { status: 500 }
      );
    });

    test('covers timeout error without personalApiKey', async () => {
      // Mock timeout error
      anthropicManager.mockAPIError('Request timed out');

      const mockFile = new File(['test content'], 'fridge.jpg', {
        type: 'image/jpeg',
      });
      const formData = new FormData();
      formData.append('image', mockFile);
      formData.append('locale', 'en');

      const request = createMockRequestWithFormData(formData);

      const { POST } = await import('@/app/api/analyze-fridge/route');
      await POST(request);

      // Should hit generic error path since timeout is not auth error
      expect(mockNextResponseJson).toHaveBeenCalledWith(
        {
          success: false,
          error: expect.stringContaining('analysis'),
          processingTime: expect.any(Number),
        },
        { status: 500 }
      );
    });

    test('covers malformed JSON response error', async () => {
      // Mock malformed JSON response
      anthropicManager.mockMalformedJSON();

      const mockFile = new File(['test content'], 'fridge.jpg', {
        type: 'image/jpeg',
      });
      const formData = new FormData();
      formData.append('image', mockFile);
      formData.append('apiKey', 'sk-ant-api-key');
      formData.append('locale', 'en');

      const request = createMockRequestWithFormData(formData);

      const { POST } = await import('@/app/api/analyze-fridge/route');
      await POST(request);

      // Should hit generic error handling
      expect(mockNextResponseJson).toHaveBeenCalledWith(
        {
          success: false,
          error: expect.stringContaining('analysis'),
          processingTime: expect.any(Number),
        },
        { status: 500 }
      );
    });
  });
});
