/**
 * Core Test Suite for /api/analyze-fridge - Branch Coverage
 * Focus: Specific branch coverage scenarios for authentication and error handling
 */

import {
  createMockRequestWithFormData,
  AnthropicMockManager,
  NextResponseMockManager,
} from '../helpers/api-test-utils';

// Import mock creator from the global mock
import { mockMessagesCreate } from '../__mocks__/@anthropic-ai/sdk';

// Tell Jest to use the mock SDK
jest.mock('@anthropic-ai/sdk');

// Mock NextResponse with proper implementation
const mockNextResponseJson = jest.fn();
jest.mock('next/server', () => ({
  NextResponse: {
    json: mockNextResponseJson,
  },
  NextRequest: jest.fn(),
}));

// Mock constants to provide valid environment
jest.mock('@/lib/constants', () => ({
  ENV: {
    NODE_ENV: 'test',
    ANTHROPIC_API_KEY: 'sk-ant-api-test-key-12345',
  },
  APP_CONFIG: {
    MAX_FILE_SIZE: 5000000, // 5MB
    ALLOWED_FILE_TYPES: ['image/jpeg', 'image/png', 'image/webp'],
    ERROR_MESSAGES: {
      FILE_TOO_LARGE: 'File size too large. Maximum size is 5MB.',
      INVALID_FILE_TYPE:
        'Invalid file type. Only JPEG, PNG, and WebP images are allowed.',
      API_ERROR: 'Failed to analyze fridge contents',
      PARSE_ERROR: 'Failed to parse AI response',
      REQUEST_ERROR: 'Failed to process request',
    },
  },
}));

// Test utilities and mock managers
let anthropicMockManager: AnthropicMockManager;
let responseMockManager: NextResponseMockManager;

// Helper to create mock File
const createMockFile = (
  name: string,
  size: number,
  type: string,
  content = 'mock content'
) => {
  const file = new File([content], name, { type });
  Object.defineProperty(file, 'size', { value: size });
  return file;
};

describe('/api/analyze-fridge - Branch Coverage', () => {
  beforeEach(() => {
    // Reset all mocks before each test
    jest.clearAllMocks();

    // Initialize mock managers
    anthropicMockManager = new AnthropicMockManager(mockAnthropicCreate);
    responseMockManager = new NextResponseMockManager(mockNextResponseJson);

    // Setup standard mock behavior
    responseMockManager.setupStandardBehavior();
    anthropicMockManager.mockSuccessfulRecipe('en');
  });

  describe('Authentication Error Handling Branches', () => {
    test('handles auth error with personal API key', async () => {
      // Mock valid form data with personal API key (correct format)
      const formData = new FormData();
      formData.append(
        'image',
        createMockFile('test.jpg', 1000000, 'image/jpeg')
      );
      formData.append('apiKey', 'sk-ant-api03-invalid-personal-key-12345');

      const request = createMockRequestWithFormData(formData);

      // Mock Anthropic to throw auth error
      mockAnthropicCreate.mockRejectedValue(
        new Error('Authentication failed: Invalid API key')
      );

      const { POST } = await import('@/app/api/analyze-fridge/route');
      await POST(request);

      expect(mockNextResponseJson).toHaveBeenCalledWith(
        {
          success: false,
          error: 'Failed to analyze fridge contents',
          processingTime: expect.any(Number),
        },
        { status: 500 }
      );
    });

    test('handles auth error without personal API key', async () => {
      // Mock valid form data without personal API key
      const formData = new FormData();
      formData.append(
        'image',
        createMockFile('test.jpg', 1000000, 'image/jpeg')
      );

      const request = createMockRequestWithFormData(formData);

      // Mock Anthropic to throw auth error
      mockAnthropicCreate.mockRejectedValue(
        new Error('Authentication failed: No API key provided')
      );

      const { POST } = await import('@/app/api/analyze-fridge/route');
      await POST(request);

      expect(mockNextResponseJson).toHaveBeenCalledWith(
        {
          success: false,
          error: 'Failed to analyze fridge contents',
          processingTime: expect.any(Number),
        },
        { status: 500 }
      );
    });

    test('handles non-auth errors (rate limit, service unavailable)', async () => {
      // Mock valid form data with properly formatted API key
      const formData = new FormData();
      formData.append(
        'image',
        createMockFile('test.jpg', 1000000, 'image/jpeg')
      );
      formData.append(
        'apiKey',
        'sk-ant-api03-valid-format-but-rate-limited-12345'
      );

      const request = createMockRequestWithFormData(formData);

      // Mock Anthropic to throw rate limit error
      mockAnthropicCreate.mockRejectedValue(new Error('Rate limit exceeded'));

      const { POST } = await import('@/app/api/analyze-fridge/route');
      await POST(request);

      // Should return the general error response (not the auth-specific branch)
      expect(mockNextResponseJson).toHaveBeenCalledWith(
        {
          success: false,
          error: 'Failed to analyze fridge contents',
          processingTime: expect.any(Number),
        },
        { status: 500 }
      );
    });

    test('handles general errors with default status', async () => {
      // Mock valid form data with properly formatted API key
      const formData = new FormData();
      formData.append(
        'image',
        createMockFile('test.jpg', 1000000, 'image/jpeg')
      );
      formData.append('apiKey', 'sk-ant-api03-valid-format-but-error-12345');

      const request = createMockRequestWithFormData(formData);

      // Mock a generic error that doesn't classify as auth error
      mockAnthropicCreate.mockRejectedValue(new Error('Unexpected API error'));

      const { POST } = await import('@/app/api/analyze-fridge/route');
      await POST(request);

      expect(mockNextResponseJson).toHaveBeenCalledWith(
        {
          success: false,
          error: 'Failed to analyze fridge contents',
          processingTime: expect.any(Number),
        },
        { status: 500 }
      );
    });
  });

  describe('Edge Case Error Scenarios', () => {
    test('handles network timeout errors', async () => {
      const formData = new FormData();
      formData.append(
        'image',
        createMockFile('test.jpg', 1000000, 'image/jpeg')
      );
      formData.append('locale', 'en');

      const request = createMockRequestWithFormData(formData);

      // Mock timeout error
      mockAnthropicCreate.mockRejectedValue(new Error('Network timeout'));

      const { POST } = await import('@/app/api/analyze-fridge/route');
      await POST(request);

      expect(mockNextResponseJson).toHaveBeenCalledWith(
        {
          success: false,
          error: 'Failed to analyze fridge contents',
          processingTime: expect.any(Number),
        },
        { status: 500 }
      );
    });

    test('handles malformed API response errors', async () => {
      const formData = new FormData();
      formData.append(
        'image',
        createMockFile('test.jpg', 1000000, 'image/jpeg')
      );
      formData.append('locale', 'en');

      const request = createMockRequestWithFormData(formData);

      // Mock malformed response error
      mockAnthropicCreate.mockRejectedValue(new Error('Malformed response'));

      const { POST } = await import('@/app/api/analyze-fridge/route');
      await POST(request);

      expect(mockNextResponseJson).toHaveBeenCalledWith(
        {
          success: false,
          error: 'Failed to analyze fridge contents',
          processingTime: expect.any(Number),
        },
        { status: 500 }
      );
    });
  });
});
